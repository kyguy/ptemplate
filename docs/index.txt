:mod:`ptemplate` --- lightweight, data-driven templating
========================================================

.. automodule:: ptemplate

Installing :mod:`ptemplate`
---------------------------

.. highlight:: none

You can install the latest stable version of :mod:`ptemplate` using :command:`pip`::
    
    $ pip install ptemplate

Mirrors of the project's repository are hosted at `github.com`_ and `bitbucket.org`_
-- feel free to clone and issue pull requests at either service. For `git`_
users::

    $ git clone http://github.com/wcmaier/ptemplate.git

.. _github.com:     http://github.com/wcmaier/ptemplate.git
.. _bitbucket.org:  http://bitbucket.org/lt_kije/ptemplate/
.. _git:            http://git-scm.com/

And for `Mercurial`_ users::

    $ hg clone http://bitbucket.org/lt_kije/ptemplate/

.. _Mercurial:  http://mercurial.selenic.com/

Both github and bitbucket provide feeds of changes to the project; for example::

    http://github.com/wcmaier/ptemplate/commits/master.atom

If you'd like to contribute an improvement to :mod:`ptemplate`, please consider using
either of the above services. Otherwise, send an email to willmaier@ml1.net.

A quick tour of :mod:`ptemplate`'s features
-------------------------------------------

.. highlight:: python

Simple extension of Python's advanced string formatting API (:pep:`3101`):

    >>> from ptemplate.formatter import Formatter
    >>> formatter = Formatter()
    >>> template = """normal variable substitution: {var}"""
    >>> formatter.format(template, var="foo")
    'normal variable substitution: foo'

    >>> template = """{#section}this is {something} {/section}"""
    >>> data = {"section": [{"something": "fast"}, {"something": "easy"}, {"something": "simple"}]}
    >>> formatter.format(template, **data)
    'this is fast this is easy this is simple '

    >>> template = """{%this is a comment}"""
    >>> formatter.format(template, **{})
    ''

Content filtering system (eg HTML sanitization):

    >>> import cgi
    >>> from ptemplate.template import Template
    >>> template = """something dangerous: {content!h}"""
    >>> templater = Template(template=template)
    >>> templater.converters["h"] = cgi.escape
    >>> content = """<p>some HTML from the wild</p>"""
    >>> templater.render({"content": content}, template=template)
    'something dangerous: &lt;p&gt;some HTML from the wild&lt;/p&gt;'

Basic compatibility with Google's _`ctemplate`:

    >>> from ptemplate.ctemplate import CTemplate
    >>> template = """Google is {{#section}}{{something}}, {{/section}}"""
    >>> templater = CTemplate(template=template)
    >>> data = {"section": [{"something": "not evil"},{"something": "a company"}]}
    >>> templater.render(data)
    'Google is not evil, a company, '

.. _ctemplate:      http://code.google.com/p/google-ctemplate/

Basic usage
-----------

ctemplate support
-----------------

Differences with ctemplate
++++++++++++++++++++++++++

API
---

.. automodule:: ptemplate.formatter
    :members:
    :show-inheritance:

.. automodule:: ptemplate.template
    :members:
    :show-inheritance:

.. automodule:: ptemplate.ctemplate
    :members:
    :show-inheritance:

Testing :mod:`ptemplate`
------------------------

:mod:`ptemplate` ships with a number of unit tests that help ensure that the
code runs correctly. The tests live in the :mod:`tests` package and can be run
by ``setup.py``::
    
    $ python setup.py test

All new code in :mod:`ptemplate` should be accompanied by unit and/or functional
tests. Note that many of the unit tests included here are ported from Google's
ctemplate (and run against the :mod:`ptemplate.ctemplate` interface). Ideally,
:mod:`ptemplate` should pass as many of ctemplate's tests as possible.
